// <auto-generated />
using System;
using ExamCalculator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ExamCalculator.Data.Migrations
{
    [DbContext(typeof(ApplicationDataContext))]
    [Migration("20210902195932_AddedExaminations")]
    partial class AddedExaminations
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.9");

            modelBuilder.Entity("ExamCalculator.Data.Exam", b =>
                {
                    b.Property<Guid>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("ExamCalculator.Data.ExamTask", b =>
                {
                    b.Property<Guid>("ExamTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("TEXT");

                    b.Property<float>("MaximumPoints")
                        .HasColumnType("REAL");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.HasKey("ExamTaskId");

                    b.HasIndex("ExamId");

                    b.ToTable("ExamTasks");
                });

            modelBuilder.Entity("ExamCalculator.Data.Examination", b =>
                {
                    b.Property<Guid>("ExaminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExamId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("TakenOn")
                        .HasColumnType("TEXT");

                    b.HasKey("ExaminationId");

                    b.HasIndex("ExamId");

                    b.HasIndex("GroupId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("ExamCalculator.Data.ExaminationTaskResult", b =>
                {
                    b.Property<Guid>("ExaminationTaskResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExamTaskId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ExaminationId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PupilId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Score")
                        .HasColumnType("INTEGER");

                    b.HasKey("ExaminationTaskResultId");

                    b.HasIndex("ExamTaskId");

                    b.HasIndex("ExaminationId");

                    b.HasIndex("PupilId");

                    b.ToTable("ExaminationTaskResults");
                });

            modelBuilder.Entity("ExamCalculator.Data.Group", b =>
                {
                    b.Property<Guid>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ExamCalculator.Data.Pupil", b =>
                {
                    b.Property<Guid>("PupilId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.HasKey("PupilId");

                    b.ToTable("Pupils");
                });

            modelBuilder.Entity("GroupPupil", b =>
                {
                    b.Property<Guid>("GroupsGroupId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("PupilsPupilId")
                        .HasColumnType("TEXT");

                    b.HasKey("GroupsGroupId", "PupilsPupilId");

                    b.HasIndex("PupilsPupilId");

                    b.ToTable("GroupPupil");
                });

            modelBuilder.Entity("ExamCalculator.Data.ExamTask", b =>
                {
                    b.HasOne("ExamCalculator.Data.Exam", "Exam")
                        .WithMany("Tasks")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");
                });

            modelBuilder.Entity("ExamCalculator.Data.Examination", b =>
                {
                    b.HasOne("ExamCalculator.Data.Exam", "Exam")
                        .WithMany("Examinations")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamCalculator.Data.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ExamCalculator.Data.ExaminationTaskResult", b =>
                {
                    b.HasOne("ExamCalculator.Data.ExamTask", "ExamTask")
                        .WithMany()
                        .HasForeignKey("ExamTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamCalculator.Data.Examination", "Examination")
                        .WithMany("Results")
                        .HasForeignKey("ExaminationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamCalculator.Data.Pupil", "Pupil")
                        .WithMany()
                        .HasForeignKey("PupilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Examination");

                    b.Navigation("ExamTask");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("GroupPupil", b =>
                {
                    b.HasOne("ExamCalculator.Data.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ExamCalculator.Data.Pupil", null)
                        .WithMany()
                        .HasForeignKey("PupilsPupilId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ExamCalculator.Data.Exam", b =>
                {
                    b.Navigation("Examinations");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ExamCalculator.Data.Examination", b =>
                {
                    b.Navigation("Results");
                });
#pragma warning restore 612, 618
        }
    }
}
